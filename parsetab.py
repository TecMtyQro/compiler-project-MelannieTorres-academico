
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'SLR'

_lr_signature = 'leftADDMINUSleftMULTIPLICATIONDIVISIONADD AND BOOL BOOL_LITERAL CONST DIVISION DOUBLE_QUOTE ELSE EQUALS FLOAT FLOAT_LITERAL GET GT ID IF INT INT_LITERAL IS_EQUAL IS_NOT_EQUAL LEFT_CURLY_BRACKET LEFT_PARENTHESIS LET LT MAIN MINUS MULTIPLICATION OR QUOTE READ RETURN RIGHT_CURLY_BRACKET RIGHT_PARENTHESIS SEMICOLON STATIC STRING STRING_LITERAL VAR VOID WHILE WRITEprogram : STATIC VOID MAIN blockblock :  LEFT_CURLY_BRACKET expressions RIGHT_CURLY_BRACKETexpressions : expression\n                   | expression expressions expression : read_expression SEMICOLON\n                  | write_expression SEMICOLON\n                  | RETURN INT_LITERAL SEMICOLON\n                  | RETURN BOOL_LITERAL SEMICOLON\n                  | assign_expression SEMICOLON\n                  | if_expression\n                  | while_expressionwhile_expression : WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS blockif_expression : start_if\n                     | start_if else_expressionstart_if : IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS blockelse_expression : ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression\n                       | ELSE blockread_expression : READwrite_expression : WRITE LEFT_PARENTHESIS string_literals RIGHT_PARENTHESISarithmetic_datatypes : INT\n                            | FLOATbool_datatypes : BOOLstring_datatypes : STRINGassign_expression : CONST aux_assign_expression\n                         | aux_assign_expression\n                         | declaration_expression\n                         | aux2_assign_expressionaux_assign_expression : arithmetic_datatypes ID EQUALS arithmetic_expression\n              | bool_datatypes ID EQUALS bool_expression\n              | string_datatypes ID EQUALS string_expressionaux2_assign_expression : ID EQUALS arithmetic_expression\n              | ID EQUALS bool_expression\n              | ID EQUALS string_expressiondeclaration_expression : arithmetic_datatypes ID\n              | bool_datatypes ID\n              | string_datatypes IDarithmetic_expression : arithmetic_literals ADD arithmetic_expression\n                             | arithmetic_literals MINUS arithmetic_expression\n                             | arithmetic_literals MULTIPLICATION arithmetic_expression\n                             | arithmetic_literals DIVISION arithmetic_expression\n                             | arithmetic_literals arithmetic_literals : INT_LITERAL\n              | FLOAT_LITERAL string_literals : STRING_LITERAL\n                       | IDbool_expression : BOOL_LITERAL AND bool_expression\n                         | BOOL_LITERAL OR bool_expression\n                         | BOOL_LITERAL string_expression : QUOTE STRING_LITERAL QUOTE\n                         | DOUBLE_QUOTE STRING_LITERAL DOUBLE_QUOTE condition : arithmetic_expression GT arithmetic_expression\n                   | arithmetic_expression LT arithmetic_expression\n                   | arithmetic_expression GET arithmetic_expression\n                   | arithmetic_expression LET arithmetic_expression\n                   | arithmetic_expression IS_EQUAL arithmetic_expression\n                   | arithmetic_expression IS_NOT_EQUAL arithmetic_expression\n                   | BOOL_LITERAL IS_EQUAL BOOL_LITERAL\n                   | BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL'
    
_lr_action_items = {'STATIC':([0,],[2,]),'$end':([1,5,32,],[0,-1,-2,]),'VOID':([2,],[3,]),'MAIN':([3,],[4,]),'LEFT_CURLY_BRACKET':([4,45,80,100,120,],[6,6,6,6,6,]),'RETURN':([6,8,13,14,21,32,34,35,38,44,52,53,61,102,119,122,],[11,11,-10,-11,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'READ':([6,8,13,14,21,32,34,35,38,44,52,53,61,102,119,122,],[15,15,-10,-11,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'WRITE':([6,8,13,14,21,32,34,35,38,44,52,53,61,102,119,122,],[16,16,-10,-11,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'CONST':([6,8,13,14,21,32,34,35,38,44,52,53,61,102,119,122,],[17,17,-10,-11,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'WHILE':([6,8,13,14,21,32,34,35,38,44,52,53,61,102,119,122,],[22,22,-10,-11,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'ID':([6,8,13,14,21,23,25,26,28,29,30,31,32,34,35,38,39,41,42,43,44,52,53,61,102,119,122,],[24,24,-10,-11,-13,47,49,50,-20,-21,-22,-23,-2,-5,-6,-9,56,57,58,59,-14,-7,-8,-17,-12,-15,-16,]),'IF':([6,8,13,14,21,32,34,35,38,44,45,52,53,61,102,119,122,],[27,27,-10,-11,-13,-2,-5,-6,-9,-14,60,-7,-8,-17,-12,-15,-16,]),'INT':([6,8,13,14,17,21,32,34,35,38,44,52,53,61,102,119,122,],[28,28,-10,-11,28,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'FLOAT':([6,8,13,14,17,21,32,34,35,38,44,52,53,61,102,119,122,],[29,29,-10,-11,29,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'BOOL':([6,8,13,14,17,21,32,34,35,38,44,52,53,61,102,119,122,],[30,30,-10,-11,30,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'STRING':([6,8,13,14,17,21,32,34,35,38,44,52,53,61,102,119,122,],[31,31,-10,-11,31,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'RIGHT_CURLY_BRACKET':([7,8,13,14,21,32,33,34,35,38,44,52,53,61,102,119,122,],[32,-3,-10,-11,-13,-2,-4,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'SEMICOLON':([9,10,12,15,18,19,20,36,37,40,47,49,50,65,66,67,69,70,71,72,78,93,98,99,111,112,113,114,115,116,117,118,],[34,35,38,-18,-25,-26,-27,52,53,-24,-34,-35,-36,-41,-42,-43,-31,-32,-33,-48,-19,-28,-29,-30,-37,-38,-39,-40,-46,-47,-49,-50,]),'INT_LITERAL':([11,46,48,51,68,79,81,82,83,84,85,86,89,90,91,92,],[36,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'BOOL_LITERAL':([11,46,48,51,75,79,87,88,94,95,],[37,64,72,64,72,64,109,110,72,72,]),'LEFT_PARENTHESIS':([16,22,27,60,],[39,46,51,79,]),'ELSE':([21,32,119,121,],[45,-2,-15,45,]),'EQUALS':([24,47,49,50,57,58,59,],[48,68,75,76,68,75,76,]),'STRING_LITERAL':([39,73,74,],[55,96,97,]),'FLOAT_LITERAL':([46,48,51,68,79,81,82,83,84,85,86,89,90,91,92,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'QUOTE':([48,76,96,],[73,73,117,]),'DOUBLE_QUOTE':([48,76,97,],[74,74,118,]),'RIGHT_PARENTHESIS':([54,55,56,62,65,66,67,77,101,103,104,105,106,107,108,109,110,111,112,113,114,],[78,-44,-45,80,-41,-42,-43,100,120,-51,-52,-53,-54,-55,-56,-57,-58,-37,-38,-39,-40,]),'GT':([63,65,66,67,111,112,113,114,],[81,-41,-42,-43,-37,-38,-39,-40,]),'LT':([63,65,66,67,111,112,113,114,],[82,-41,-42,-43,-37,-38,-39,-40,]),'GET':([63,65,66,67,111,112,113,114,],[83,-41,-42,-43,-37,-38,-39,-40,]),'LET':([63,65,66,67,111,112,113,114,],[84,-41,-42,-43,-37,-38,-39,-40,]),'IS_EQUAL':([63,64,65,66,67,111,112,113,114,],[85,87,-41,-42,-43,-37,-38,-39,-40,]),'IS_NOT_EQUAL':([63,64,65,66,67,111,112,113,114,],[86,88,-41,-42,-43,-37,-38,-39,-40,]),'ADD':([65,66,67,],[89,-42,-43,]),'MINUS':([65,66,67,],[90,-42,-43,]),'MULTIPLICATION':([65,66,67,],[91,-42,-43,]),'DIVISION':([65,66,67,],[92,-42,-43,]),'AND':([72,],[94,]),'OR':([72,],[95,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,45,80,100,120,],[5,61,102,119,121,]),'expressions':([6,8,],[7,33,]),'expression':([6,8,],[8,8,]),'read_expression':([6,8,],[9,9,]),'write_expression':([6,8,],[10,10,]),'assign_expression':([6,8,],[12,12,]),'if_expression':([6,8,],[13,13,]),'while_expression':([6,8,],[14,14,]),'aux_assign_expression':([6,8,17,],[18,18,40,]),'declaration_expression':([6,8,],[19,19,]),'aux2_assign_expression':([6,8,],[20,20,]),'start_if':([6,8,],[21,21,]),'arithmetic_datatypes':([6,8,17,],[23,23,41,]),'bool_datatypes':([6,8,17,],[25,25,42,]),'string_datatypes':([6,8,17,],[26,26,43,]),'else_expression':([21,121,],[44,122,]),'string_literals':([39,],[54,]),'condition':([46,51,79,],[62,77,101,]),'arithmetic_expression':([46,48,51,68,79,81,82,83,84,85,86,89,90,91,92,],[63,69,63,93,63,103,104,105,106,107,108,111,112,113,114,]),'arithmetic_literals':([46,48,51,68,79,81,82,83,84,85,86,89,90,91,92,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'bool_expression':([48,75,94,95,],[70,98,115,116,]),'string_expression':([48,76,],[71,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> STATIC VOID MAIN block','program',4,'p_program','lexer.py',119),
  ('block -> LEFT_CURLY_BRACKET expressions RIGHT_CURLY_BRACKET','block',3,'p_block','lexer.py',123),
  ('expressions -> expression','expressions',1,'p_expressions','lexer.py',127),
  ('expressions -> expression expressions','expressions',2,'p_expressions','lexer.py',128),
  ('expression -> read_expression SEMICOLON','expression',2,'p_expression','lexer.py',131),
  ('expression -> write_expression SEMICOLON','expression',2,'p_expression','lexer.py',132),
  ('expression -> RETURN INT_LITERAL SEMICOLON','expression',3,'p_expression','lexer.py',133),
  ('expression -> RETURN BOOL_LITERAL SEMICOLON','expression',3,'p_expression','lexer.py',134),
  ('expression -> assign_expression SEMICOLON','expression',2,'p_expression','lexer.py',135),
  ('expression -> if_expression','expression',1,'p_expression','lexer.py',136),
  ('expression -> while_expression','expression',1,'p_expression','lexer.py',137),
  ('while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block','while_expression',5,'p_while_expression','lexer.py',141),
  ('if_expression -> start_if','if_expression',1,'p_if_expression','lexer.py',145),
  ('if_expression -> start_if else_expression','if_expression',2,'p_if_expression','lexer.py',146),
  ('start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block','start_if',5,'p_start_if','lexer.py',149),
  ('else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression','else_expression',7,'p_else_expression','lexer.py',152),
  ('else_expression -> ELSE block','else_expression',2,'p_else_expression','lexer.py',153),
  ('read_expression -> READ','read_expression',1,'p_read_expression','lexer.py',156),
  ('write_expression -> WRITE LEFT_PARENTHESIS string_literals RIGHT_PARENTHESIS','write_expression',4,'p_write_expression','lexer.py',160),
  ('arithmetic_datatypes -> INT','arithmetic_datatypes',1,'p_arithmetic_datatypes','lexer.py',164),
  ('arithmetic_datatypes -> FLOAT','arithmetic_datatypes',1,'p_arithmetic_datatypes','lexer.py',165),
  ('bool_datatypes -> BOOL','bool_datatypes',1,'p_bool_datatypes','lexer.py',168),
  ('string_datatypes -> STRING','string_datatypes',1,'p_string_datatypes','lexer.py',171),
  ('assign_expression -> CONST aux_assign_expression','assign_expression',2,'p_assign_expression','lexer.py',174),
  ('assign_expression -> aux_assign_expression','assign_expression',1,'p_assign_expression','lexer.py',175),
  ('assign_expression -> declaration_expression','assign_expression',1,'p_assign_expression','lexer.py',176),
  ('assign_expression -> aux2_assign_expression','assign_expression',1,'p_assign_expression','lexer.py',177),
  ('aux_assign_expression -> arithmetic_datatypes ID EQUALS arithmetic_expression','aux_assign_expression',4,'p_aux_assign_expression','lexer.py',183),
  ('aux_assign_expression -> bool_datatypes ID EQUALS bool_expression','aux_assign_expression',4,'p_aux_assign_expression','lexer.py',184),
  ('aux_assign_expression -> string_datatypes ID EQUALS string_expression','aux_assign_expression',4,'p_aux_assign_expression','lexer.py',185),
  ('aux2_assign_expression -> ID EQUALS arithmetic_expression','aux2_assign_expression',3,'p_aux2_assign_expression','lexer.py',188),
  ('aux2_assign_expression -> ID EQUALS bool_expression','aux2_assign_expression',3,'p_aux2_assign_expression','lexer.py',189),
  ('aux2_assign_expression -> ID EQUALS string_expression','aux2_assign_expression',3,'p_aux2_assign_expression','lexer.py',190),
  ('declaration_expression -> arithmetic_datatypes ID','declaration_expression',2,'p_declaration_expression','lexer.py',194),
  ('declaration_expression -> bool_datatypes ID','declaration_expression',2,'p_declaration_expression','lexer.py',195),
  ('declaration_expression -> string_datatypes ID','declaration_expression',2,'p_declaration_expression','lexer.py',196),
  ('arithmetic_expression -> arithmetic_literals ADD arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','lexer.py',206),
  ('arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','lexer.py',207),
  ('arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','lexer.py',208),
  ('arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','lexer.py',209),
  ('arithmetic_expression -> arithmetic_literals','arithmetic_expression',1,'p_arithmetic_expression','lexer.py',210),
  ('arithmetic_literals -> INT_LITERAL','arithmetic_literals',1,'p_arithmetic_literals','lexer.py',216),
  ('arithmetic_literals -> FLOAT_LITERAL','arithmetic_literals',1,'p_arithmetic_literals','lexer.py',217),
  ('string_literals -> STRING_LITERAL','string_literals',1,'p_string_literals','lexer.py',223),
  ('string_literals -> ID','string_literals',1,'p_string_literals','lexer.py',224),
  ('bool_expression -> BOOL_LITERAL AND bool_expression','bool_expression',3,'p_bool_expression','lexer.py',228),
  ('bool_expression -> BOOL_LITERAL OR bool_expression','bool_expression',3,'p_bool_expression','lexer.py',229),
  ('bool_expression -> BOOL_LITERAL','bool_expression',1,'p_bool_expression','lexer.py',230),
  ('string_expression -> QUOTE STRING_LITERAL QUOTE','string_expression',3,'p_string_expression','lexer.py',234),
  ('string_expression -> DOUBLE_QUOTE STRING_LITERAL DOUBLE_QUOTE','string_expression',3,'p_string_expression','lexer.py',235),
  ('condition -> arithmetic_expression GT arithmetic_expression','condition',3,'p_condition','lexer.py',239),
  ('condition -> arithmetic_expression LT arithmetic_expression','condition',3,'p_condition','lexer.py',240),
  ('condition -> arithmetic_expression GET arithmetic_expression','condition',3,'p_condition','lexer.py',241),
  ('condition -> arithmetic_expression LET arithmetic_expression','condition',3,'p_condition','lexer.py',242),
  ('condition -> arithmetic_expression IS_EQUAL arithmetic_expression','condition',3,'p_condition','lexer.py',243),
  ('condition -> arithmetic_expression IS_NOT_EQUAL arithmetic_expression','condition',3,'p_condition','lexer.py',244),
  ('condition -> BOOL_LITERAL IS_EQUAL BOOL_LITERAL','condition',3,'p_condition','lexer.py',245),
  ('condition -> BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL','condition',3,'p_condition','lexer.py',246),
]
