
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'SLR'

_lr_signature = 'leftADDMINUSleftMULTIPLICATIONDIVISIONADD AND BOOL BOOL_LITERAL CONST DIVISION ELSE EQUALS FLOAT FLOAT_LITERAL GET GT ID IF INT INT_LITERAL IS_EQUAL IS_NOT_EQUAL LEFT_CURLY_BRACKET LEFT_PARENTHESIS LET LT MAIN MINUS MULTIPLICATION OR READ RETURN RIGHT_CURLY_BRACKET RIGHT_PARENTHESIS SEMICOLON STATIC STRING STRING_LITERAL VOID WHILE WRITEprogram : STATIC VOID MAIN blockblock :  LEFT_CURLY_BRACKET expressions RIGHT_CURLY_BRACKETexpressions : expression\n                   | expression expressions expression : read_expression SEMICOLON\n                  | write_expression SEMICOLON\n                  | RETURN arithmetic_expression SEMICOLON\n                  | RETURN bool_expression SEMICOLON\n                  | assign_expression SEMICOLON\n                  | if_expression\n                  | while_expressionwhile_expression : WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS blockif_expression : start_if\n                     | start_if else_expressionstart_if : IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS blockelse_expression : ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression\n                       | ELSE blockread_expression : READwrite_expression : WRITE LEFT_PARENTHESIS string_literals RIGHT_PARENTHESISarithmetic_datatypes : INT\n                            | FLOATbool_datatypes : BOOLstring_datatypes : STRINGassign_expression : CONST aux_assign_expression\n                         | aux_assign_expression\n                         | declaration_expression\n                         | aux2_assign_expressionaux_assign_expression : arithmetic_datatypes ID EQUALS arithmetic_expression\n              | bool_datatypes ID EQUALS bool_expression\n              | string_datatypes ID EQUALS string_expressionaux2_assign_expression : ID EQUALS arithmetic_expression\n              | ID EQUALS bool_expression\n              | ID EQUALS string_expressiondeclaration_expression : arithmetic_datatypes ID\n              | bool_datatypes ID\n              | string_datatypes IDarithmetic_expression : arithmetic_literals ADD arithmetic_expression\n                             | arithmetic_literals MINUS arithmetic_expression\n                             | arithmetic_literals MULTIPLICATION arithmetic_expression\n                             | arithmetic_literals DIVISION arithmetic_expression\n                             | arithmetic_literals arithmetic_literals : INT_LITERAL\n                           | FLOAT_LITERAL\n                           | IDstring_literals : STRING_LITERAL\n                       | IDbool_expression : BOOL_LITERAL AND bool_expression\n                         | BOOL_LITERAL OR bool_expression\n                         | BOOL_LITERAL string_expression : STRING_LITERALcondition : arithmetic_expression GT arithmetic_expression\n                   | arithmetic_expression LT arithmetic_expression\n                   | arithmetic_expression GET arithmetic_expression\n                   | arithmetic_expression LET arithmetic_expression\n                   | arithmetic_expression IS_EQUAL arithmetic_expression\n                   | arithmetic_expression IS_NOT_EQUAL arithmetic_expression\n                   | BOOL_LITERAL IS_EQUAL BOOL_LITERAL\n                   | BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL'
    
_lr_action_items = {'STATIC':([0,],[2,]),'$end':([1,5,32,],[0,-1,-2,]),'VOID':([2,],[3,]),'MAIN':([3,],[4,]),'LEFT_CURLY_BRACKET':([4,50,92,104,116,],[6,6,6,6,6,]),'RETURN':([6,8,13,14,21,32,34,35,43,49,57,58,72,106,115,118,],[11,11,-10,-11,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'READ':([6,8,13,14,21,32,34,35,43,49,57,58,72,106,115,118,],[15,15,-10,-11,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'WRITE':([6,8,13,14,21,32,34,35,43,49,57,58,72,106,115,118,],[16,16,-10,-11,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'CONST':([6,8,13,14,21,32,34,35,43,49,57,58,72,106,115,118,],[17,17,-10,-11,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'WHILE':([6,8,13,14,21,32,34,35,43,49,57,58,72,106,115,118,],[22,22,-10,-11,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'ID':([6,8,11,13,14,21,23,25,26,28,29,30,31,32,34,35,43,44,46,47,48,49,51,53,56,57,58,59,60,61,62,72,76,91,93,94,95,96,97,98,106,115,118,],[24,24,42,-10,-11,-13,52,54,55,-20,-21,-22,-23,-2,-5,-6,-9,67,68,69,70,-14,42,42,42,-7,-8,42,42,42,42,-17,42,42,42,42,42,42,42,42,-12,-15,-16,]),'IF':([6,8,13,14,21,32,34,35,43,49,50,57,58,72,106,115,118,],[27,27,-10,-11,-13,-2,-5,-6,-9,-14,71,-7,-8,-17,-12,-15,-16,]),'INT':([6,8,13,14,17,21,32,34,35,43,49,57,58,72,106,115,118,],[28,28,-10,-11,28,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'FLOAT':([6,8,13,14,17,21,32,34,35,43,49,57,58,72,106,115,118,],[29,29,-10,-11,29,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'BOOL':([6,8,13,14,17,21,32,34,35,43,49,57,58,72,106,115,118,],[30,30,-10,-11,30,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'STRING':([6,8,13,14,17,21,32,34,35,43,49,57,58,72,106,115,118,],[31,31,-10,-11,31,-13,-2,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'RIGHT_CURLY_BRACKET':([7,8,13,14,21,32,33,34,35,43,49,57,58,72,106,115,118,],[32,-3,-10,-11,-13,-2,-4,-5,-6,-9,-14,-7,-8,-17,-12,-15,-16,]),'SEMICOLON':([9,10,12,15,18,19,20,36,37,38,39,40,41,42,45,52,54,55,77,78,79,80,84,85,86,87,88,89,90,101,102,103,],[34,35,43,-18,-25,-26,-27,57,58,-41,-49,-42,-43,-44,-24,-34,-35,-36,-31,-32,-33,-50,-37,-38,-39,-40,-47,-48,-19,-28,-29,-30,]),'BOOL_LITERAL':([11,51,53,56,63,64,81,91,99,100,],[39,75,39,75,39,39,39,75,113,114,]),'INT_LITERAL':([11,51,53,56,59,60,61,62,76,91,93,94,95,96,97,98,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'FLOAT_LITERAL':([11,51,53,56,59,60,61,62,76,91,93,94,95,96,97,98,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'LEFT_PARENTHESIS':([16,22,27,71,],[44,51,56,91,]),'ELSE':([21,32,115,117,],[50,-2,-15,50,]),'EQUALS':([24,52,54,55,68,69,70,],[53,76,81,82,76,81,82,]),'ADD':([38,40,41,42,],[59,-42,-43,-44,]),'MINUS':([38,40,41,42,],[60,-42,-43,-44,]),'MULTIPLICATION':([38,40,41,42,],[61,-42,-43,-44,]),'DIVISION':([38,40,41,42,],[62,-42,-43,-44,]),'GT':([38,40,41,42,74,84,85,86,87,],[-41,-42,-43,-44,93,-37,-38,-39,-40,]),'RIGHT_PARENTHESIS':([38,40,41,42,65,66,67,73,83,84,85,86,87,105,107,108,109,110,111,112,113,114,],[-41,-42,-43,-44,90,-45,-46,92,104,-37,-38,-39,-40,116,-51,-52,-53,-54,-55,-56,-57,-58,]),'LT':([38,40,41,42,74,84,85,86,87,],[-41,-42,-43,-44,94,-37,-38,-39,-40,]),'GET':([38,40,41,42,74,84,85,86,87,],[-41,-42,-43,-44,95,-37,-38,-39,-40,]),'LET':([38,40,41,42,74,84,85,86,87,],[-41,-42,-43,-44,96,-37,-38,-39,-40,]),'IS_EQUAL':([38,40,41,42,74,75,84,85,86,87,],[-41,-42,-43,-44,97,99,-37,-38,-39,-40,]),'IS_NOT_EQUAL':([38,40,41,42,74,75,84,85,86,87,],[-41,-42,-43,-44,98,100,-37,-38,-39,-40,]),'AND':([39,],[63,]),'OR':([39,],[64,]),'STRING_LITERAL':([44,53,82,],[66,80,80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,50,92,104,116,],[5,72,106,115,117,]),'expressions':([6,8,],[7,33,]),'expression':([6,8,],[8,8,]),'read_expression':([6,8,],[9,9,]),'write_expression':([6,8,],[10,10,]),'assign_expression':([6,8,],[12,12,]),'if_expression':([6,8,],[13,13,]),'while_expression':([6,8,],[14,14,]),'aux_assign_expression':([6,8,17,],[18,18,45,]),'declaration_expression':([6,8,],[19,19,]),'aux2_assign_expression':([6,8,],[20,20,]),'start_if':([6,8,],[21,21,]),'arithmetic_datatypes':([6,8,17,],[23,23,46,]),'bool_datatypes':([6,8,17,],[25,25,47,]),'string_datatypes':([6,8,17,],[26,26,48,]),'arithmetic_expression':([11,51,53,56,59,60,61,62,76,91,93,94,95,96,97,98,],[36,74,77,74,84,85,86,87,101,74,107,108,109,110,111,112,]),'bool_expression':([11,53,63,64,81,],[37,78,88,89,102,]),'arithmetic_literals':([11,51,53,56,59,60,61,62,76,91,93,94,95,96,97,98,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'else_expression':([21,117,],[49,118,]),'string_literals':([44,],[65,]),'condition':([51,56,91,],[73,83,105,]),'string_expression':([53,82,],[79,103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> STATIC VOID MAIN block','program',4,'p_program','parser.py',153),
  ('block -> LEFT_CURLY_BRACKET expressions RIGHT_CURLY_BRACKET','block',3,'p_block','parser.py',158),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',162),
  ('expressions -> expression expressions','expressions',2,'p_expressions','parser.py',163),
  ('expression -> read_expression SEMICOLON','expression',2,'p_expression','parser.py',166),
  ('expression -> write_expression SEMICOLON','expression',2,'p_expression','parser.py',167),
  ('expression -> RETURN arithmetic_expression SEMICOLON','expression',3,'p_expression','parser.py',168),
  ('expression -> RETURN bool_expression SEMICOLON','expression',3,'p_expression','parser.py',169),
  ('expression -> assign_expression SEMICOLON','expression',2,'p_expression','parser.py',170),
  ('expression -> if_expression','expression',1,'p_expression','parser.py',171),
  ('expression -> while_expression','expression',1,'p_expression','parser.py',172),
  ('while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block','while_expression',5,'p_while_expression','parser.py',176),
  ('if_expression -> start_if','if_expression',1,'p_if_expression','parser.py',180),
  ('if_expression -> start_if else_expression','if_expression',2,'p_if_expression','parser.py',181),
  ('start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block','start_if',5,'p_start_if','parser.py',184),
  ('else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression','else_expression',7,'p_else_expression','parser.py',187),
  ('else_expression -> ELSE block','else_expression',2,'p_else_expression','parser.py',188),
  ('read_expression -> READ','read_expression',1,'p_read_expression','parser.py',191),
  ('write_expression -> WRITE LEFT_PARENTHESIS string_literals RIGHT_PARENTHESIS','write_expression',4,'p_write_expression','parser.py',195),
  ('arithmetic_datatypes -> INT','arithmetic_datatypes',1,'p_arithmetic_datatypes','parser.py',199),
  ('arithmetic_datatypes -> FLOAT','arithmetic_datatypes',1,'p_arithmetic_datatypes','parser.py',200),
  ('bool_datatypes -> BOOL','bool_datatypes',1,'p_bool_datatypes','parser.py',203),
  ('string_datatypes -> STRING','string_datatypes',1,'p_string_datatypes','parser.py',206),
  ('assign_expression -> CONST aux_assign_expression','assign_expression',2,'p_assign_expression','parser.py',209),
  ('assign_expression -> aux_assign_expression','assign_expression',1,'p_assign_expression','parser.py',210),
  ('assign_expression -> declaration_expression','assign_expression',1,'p_assign_expression','parser.py',211),
  ('assign_expression -> aux2_assign_expression','assign_expression',1,'p_assign_expression','parser.py',212),
  ('aux_assign_expression -> arithmetic_datatypes ID EQUALS arithmetic_expression','aux_assign_expression',4,'p_aux_assign_expression','parser.py',216),
  ('aux_assign_expression -> bool_datatypes ID EQUALS bool_expression','aux_assign_expression',4,'p_aux_assign_expression','parser.py',217),
  ('aux_assign_expression -> string_datatypes ID EQUALS string_expression','aux_assign_expression',4,'p_aux_assign_expression','parser.py',218),
  ('aux2_assign_expression -> ID EQUALS arithmetic_expression','aux2_assign_expression',3,'p_aux2_assign_expression','parser.py',221),
  ('aux2_assign_expression -> ID EQUALS bool_expression','aux2_assign_expression',3,'p_aux2_assign_expression','parser.py',222),
  ('aux2_assign_expression -> ID EQUALS string_expression','aux2_assign_expression',3,'p_aux2_assign_expression','parser.py',223),
  ('declaration_expression -> arithmetic_datatypes ID','declaration_expression',2,'p_declaration_expression','parser.py',227),
  ('declaration_expression -> bool_datatypes ID','declaration_expression',2,'p_declaration_expression','parser.py',228),
  ('declaration_expression -> string_datatypes ID','declaration_expression',2,'p_declaration_expression','parser.py',229),
  ('arithmetic_expression -> arithmetic_literals ADD arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',239),
  ('arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',240),
  ('arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',241),
  ('arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','parser.py',242),
  ('arithmetic_expression -> arithmetic_literals','arithmetic_expression',1,'p_arithmetic_expression','parser.py',243),
  ('arithmetic_literals -> INT_LITERAL','arithmetic_literals',1,'p_arithmetic_literals','parser.py',249),
  ('arithmetic_literals -> FLOAT_LITERAL','arithmetic_literals',1,'p_arithmetic_literals','parser.py',250),
  ('arithmetic_literals -> ID','arithmetic_literals',1,'p_arithmetic_literals','parser.py',251),
  ('string_literals -> STRING_LITERAL','string_literals',1,'p_string_literals','parser.py',257),
  ('string_literals -> ID','string_literals',1,'p_string_literals','parser.py',258),
  ('bool_expression -> BOOL_LITERAL AND bool_expression','bool_expression',3,'p_bool_expression','parser.py',262),
  ('bool_expression -> BOOL_LITERAL OR bool_expression','bool_expression',3,'p_bool_expression','parser.py',263),
  ('bool_expression -> BOOL_LITERAL','bool_expression',1,'p_bool_expression','parser.py',264),
  ('string_expression -> STRING_LITERAL','string_expression',1,'p_string_expression','parser.py',268),
  ('condition -> arithmetic_expression GT arithmetic_expression','condition',3,'p_condition','parser.py',272),
  ('condition -> arithmetic_expression LT arithmetic_expression','condition',3,'p_condition','parser.py',273),
  ('condition -> arithmetic_expression GET arithmetic_expression','condition',3,'p_condition','parser.py',274),
  ('condition -> arithmetic_expression LET arithmetic_expression','condition',3,'p_condition','parser.py',275),
  ('condition -> arithmetic_expression IS_EQUAL arithmetic_expression','condition',3,'p_condition','parser.py',276),
  ('condition -> arithmetic_expression IS_NOT_EQUAL arithmetic_expression','condition',3,'p_condition','parser.py',277),
  ('condition -> BOOL_LITERAL IS_EQUAL BOOL_LITERAL','condition',3,'p_condition','parser.py',278),
  ('condition -> BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL','condition',3,'p_condition','parser.py',279),
]
