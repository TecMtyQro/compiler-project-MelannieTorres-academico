
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND BOOL BOOL_LITERAL COMMA CONST DIVISION DOUBLE_QUOTE ELSE EQUALS FLOAT FLOAT_LITERAL GET GT ID IF INT INT_LITERAL IS_EQUAL IS_NOT_EQUAL LEFT_CURLY_BRACKET LEFT_PARENTHESIS LET LT MINUS MULTIPLE_LINE_COMMENT MULTIPLICATION NEW_LINE NOT ONE_LINE_COMMENT OR PRIVATE PUBLIC QUOTE READ RETURN RIGHT_CURLY_BRACKET RIGHT_PARENTHESIS SEMICOLON SPACE STRING STRING_LITERAL TAB VAR WHILE WRITEstatement : expressionexpression : INT_LITERAL ADD INT_LITERAL\n                  | expression MINUS expression\n                  | expression MULTIPLICATION expression\n                  | expression DIVISION expressionexpression : PUBLIC\n                | PRIVATE\n                | CONST\n                | IF\n                | ELSE\n                | READ\n                | RETURN\n                | VAR\n                | WHILE\n                | WRITE\n                | GT\n                | LT\n                | GET\n                | LET\n                | AND\n                | OR\n                | NOT\n                | EQUALS\n                | IS_NOT_EQUAL\n                | ADD\n                | MINUS\n                | MULTIPLICATION\n                | DIVISION\n                | IS_EQUAL\n                | INT\n                | FLOAT\n                | BOOL\n                | STRING\n                | FLOAT_LITERAL\n                | BOOL_LITERAL\n                | STRING_LITERAL\n                | LEFT_PARENTHESIS\n                | RIGHT_PARENTHESIS\n                | LEFT_CURLY_BRACKET\n                | RIGHT_CURLY_BRACKET\n                | COMMA\n                | SEMICOLON\n                | SPACE\n                | TAB\n                | NEW_LINE\n                | ONE_LINE_COMMENT\n                | MULTIPLE_LINE_COMMENT\n                | DOUBLE_QUOTE\n                | QUOTE\n                | ID\n                '
    
_lr_action_items = {'INT_LITERAL':([0,49,50,51,52,],[3,3,3,3,56,]),'PUBLIC':([0,49,50,51,],[8,8,8,8,]),'PRIVATE':([0,49,50,51,],[9,9,9,9,]),'CONST':([0,49,50,51,],[10,10,10,10,]),'IF':([0,49,50,51,],[11,11,11,11,]),'ELSE':([0,49,50,51,],[12,12,12,12,]),'READ':([0,49,50,51,],[13,13,13,13,]),'RETURN':([0,49,50,51,],[14,14,14,14,]),'VAR':([0,49,50,51,],[15,15,15,15,]),'WHILE':([0,49,50,51,],[16,16,16,16,]),'WRITE':([0,49,50,51,],[17,17,17,17,]),'GT':([0,49,50,51,],[18,18,18,18,]),'LT':([0,49,50,51,],[19,19,19,19,]),'GET':([0,49,50,51,],[20,20,20,20,]),'LET':([0,49,50,51,],[21,21,21,21,]),'AND':([0,49,50,51,],[22,22,22,22,]),'OR':([0,49,50,51,],[23,23,23,23,]),'NOT':([0,49,50,51,],[24,24,24,24,]),'EQUALS':([0,49,50,51,],[25,25,25,25,]),'IS_NOT_EQUAL':([0,49,50,51,],[26,26,26,26,]),'ADD':([0,3,49,50,51,],[4,52,4,4,4,]),'MINUS':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,],[5,49,-25,-26,-27,-28,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,5,5,5,49,49,49,-2,]),'MULTIPLICATION':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,],[6,50,-25,-26,-27,-28,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,6,6,6,50,50,50,-2,]),'DIVISION':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,],[7,51,-25,-26,-27,-28,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,7,7,7,51,51,51,-2,]),'IS_EQUAL':([0,49,50,51,],[27,27,27,27,]),'INT':([0,49,50,51,],[28,28,28,28,]),'FLOAT':([0,49,50,51,],[29,29,29,29,]),'BOOL':([0,49,50,51,],[30,30,30,30,]),'STRING':([0,49,50,51,],[31,31,31,31,]),'FLOAT_LITERAL':([0,49,50,51,],[32,32,32,32,]),'BOOL_LITERAL':([0,49,50,51,],[33,33,33,33,]),'STRING_LITERAL':([0,49,50,51,],[34,34,34,34,]),'LEFT_PARENTHESIS':([0,49,50,51,],[35,35,35,35,]),'RIGHT_PARENTHESIS':([0,49,50,51,],[36,36,36,36,]),'LEFT_CURLY_BRACKET':([0,49,50,51,],[37,37,37,37,]),'RIGHT_CURLY_BRACKET':([0,49,50,51,],[38,38,38,38,]),'COMMA':([0,49,50,51,],[39,39,39,39,]),'SEMICOLON':([0,49,50,51,],[40,40,40,40,]),'SPACE':([0,49,50,51,],[41,41,41,41,]),'TAB':([0,49,50,51,],[42,42,42,42,]),'NEW_LINE':([0,49,50,51,],[43,43,43,43,]),'ONE_LINE_COMMENT':([0,49,50,51,],[44,44,44,44,]),'MULTIPLE_LINE_COMMENT':([0,49,50,51,],[45,45,45,45,]),'DOUBLE_QUOTE':([0,49,50,51,],[46,46,46,46,]),'QUOTE':([0,49,50,51,],[47,47,47,47,]),'ID':([0,49,50,51,],[48,48,48,48,]),'$end':([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,],[0,-1,-25,-26,-27,-28,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-3,-4,-5,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,49,50,51,],[2,53,54,55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','lexer.py',103),
  ('expression -> INT_LITERAL ADD INT_LITERAL','expression',3,'p_expression_binop','lexer.py',108),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','lexer.py',109),
  ('expression -> expression MULTIPLICATION expression','expression',3,'p_expression_binop','lexer.py',110),
  ('expression -> expression DIVISION expression','expression',3,'p_expression_binop','lexer.py',111),
  ('expression -> PUBLIC','expression',1,'p_accept','lexer.py',114),
  ('expression -> PRIVATE','expression',1,'p_accept','lexer.py',115),
  ('expression -> CONST','expression',1,'p_accept','lexer.py',116),
  ('expression -> IF','expression',1,'p_accept','lexer.py',117),
  ('expression -> ELSE','expression',1,'p_accept','lexer.py',118),
  ('expression -> READ','expression',1,'p_accept','lexer.py',119),
  ('expression -> RETURN','expression',1,'p_accept','lexer.py',120),
  ('expression -> VAR','expression',1,'p_accept','lexer.py',121),
  ('expression -> WHILE','expression',1,'p_accept','lexer.py',122),
  ('expression -> WRITE','expression',1,'p_accept','lexer.py',123),
  ('expression -> GT','expression',1,'p_accept','lexer.py',124),
  ('expression -> LT','expression',1,'p_accept','lexer.py',125),
  ('expression -> GET','expression',1,'p_accept','lexer.py',126),
  ('expression -> LET','expression',1,'p_accept','lexer.py',127),
  ('expression -> AND','expression',1,'p_accept','lexer.py',128),
  ('expression -> OR','expression',1,'p_accept','lexer.py',129),
  ('expression -> NOT','expression',1,'p_accept','lexer.py',130),
  ('expression -> EQUALS','expression',1,'p_accept','lexer.py',131),
  ('expression -> IS_NOT_EQUAL','expression',1,'p_accept','lexer.py',132),
  ('expression -> ADD','expression',1,'p_accept','lexer.py',133),
  ('expression -> MINUS','expression',1,'p_accept','lexer.py',134),
  ('expression -> MULTIPLICATION','expression',1,'p_accept','lexer.py',135),
  ('expression -> DIVISION','expression',1,'p_accept','lexer.py',136),
  ('expression -> IS_EQUAL','expression',1,'p_accept','lexer.py',137),
  ('expression -> INT','expression',1,'p_accept','lexer.py',138),
  ('expression -> FLOAT','expression',1,'p_accept','lexer.py',139),
  ('expression -> BOOL','expression',1,'p_accept','lexer.py',140),
  ('expression -> STRING','expression',1,'p_accept','lexer.py',141),
  ('expression -> FLOAT_LITERAL','expression',1,'p_accept','lexer.py',142),
  ('expression -> BOOL_LITERAL','expression',1,'p_accept','lexer.py',143),
  ('expression -> STRING_LITERAL','expression',1,'p_accept','lexer.py',144),
  ('expression -> LEFT_PARENTHESIS','expression',1,'p_accept','lexer.py',145),
  ('expression -> RIGHT_PARENTHESIS','expression',1,'p_accept','lexer.py',146),
  ('expression -> LEFT_CURLY_BRACKET','expression',1,'p_accept','lexer.py',147),
  ('expression -> RIGHT_CURLY_BRACKET','expression',1,'p_accept','lexer.py',148),
  ('expression -> COMMA','expression',1,'p_accept','lexer.py',149),
  ('expression -> SEMICOLON','expression',1,'p_accept','lexer.py',150),
  ('expression -> SPACE','expression',1,'p_accept','lexer.py',151),
  ('expression -> TAB','expression',1,'p_accept','lexer.py',152),
  ('expression -> NEW_LINE','expression',1,'p_accept','lexer.py',153),
  ('expression -> ONE_LINE_COMMENT','expression',1,'p_accept','lexer.py',154),
  ('expression -> MULTIPLE_LINE_COMMENT','expression',1,'p_accept','lexer.py',155),
  ('expression -> DOUBLE_QUOTE','expression',1,'p_accept','lexer.py',156),
  ('expression -> QUOTE','expression',1,'p_accept','lexer.py',157),
  ('expression -> ID','expression',1,'p_accept','lexer.py',158),
]
