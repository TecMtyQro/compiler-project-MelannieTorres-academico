
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADDMINUSleftMULTIPLICATIONDIVISIONADD AND BOOL BOOL_LITERAL CONST DIVISION DOT DOUBLE_QUOTE ELSE EQUALS FLOAT FLOAT_LITERAL GET GT ID IF INT INT_LITERAL IS_EQUAL IS_NOT_EQUAL LEFT_CURLY_BRACKET LEFT_PARENTHESIS LET LT MAIN MINUS MULTIPLICATION NOT OR QUOTE READ RETURN RIGHT_CURLY_BRACKET RIGHT_PARENTHESIS SEMICOLON STATIC STRING STRING_LITERAL VAR VOID WHILE WRITEprogram : STATIC VOID MAIN blockblock :  LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET\n             |   LEFT_CURLY_BRACKET expression RETURN INT_LITERAL RIGHT_CURLY_BRACKETexpression : while_expression\n                  | if_expression\n                  | arithmetic_expression\n                  | bool_expression\n                  | assign_expression\n                  | read_expression\n                  | write_expressionwhile_expression : WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS blockif_expression : IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block\n                     | IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block ELSE blockread_expression : READwrite_expression : WRITEassign_expression : INT ID EQUALS arithmetic_expression\n              | FLOAT ID EQUALS arithmetic_expression\n              | BOOL ID EQUALS bool_expression\n              | STRING ID EQUALS string_expressionarithmetic_expression : number ADD arithmetic_expression\n                             | number MINUS arithmetic_expression\n                             | number MULTIPLICATION arithmetic_expression\n                             | number DIVISION arithmetic_expression\n                             | number number : INT_LITERAL\n              | FLOAT_LITERAL bool_expression : bool_expression AND BOOL_LITERAL\n                         | bool_expression OR BOOL_LITERAL\n                         | BOOL_LITERAL string_expression : QUOTE STRING_LITERAL QUOTE\n                         | DOUBLE_QUOTE STRING_LITERAL DOUBLE_QUOTE condition : number GT number\n                   | number LT number\n                   | number GET number\n                   | number LET number\n                   | number NOT number\n                   | BOOL_LITERAL NOT BOOL_LITERAL\n                   | number IS_EQUAL number\n                   | number IS_NOT_EQUAL number\n                   | BOOL_LITERAL IS_EQUAL BOOL_LITERAL\n                   | BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL'
    
_lr_action_items = {'STATIC':([0,],[2,]),'$end':([1,5,27,56,],[0,-1,-2,-3,]),'VOID':([2,],[3,]),'MAIN':([3,],[4,]),'LEFT_CURLY_BRACKET':([4,57,68,89,],[6,6,6,6,]),'WHILE':([6,],[16,]),'IF':([6,],[17,]),'BOOL_LITERAL':([6,29,30,31,32,54,65,66,67,],[19,42,43,46,46,19,83,84,85,]),'INT':([6,],[20,]),'FLOAT':([6,],[21,]),'BOOL':([6,],[22,]),'STRING':([6,],[23,]),'READ':([6,],[24,]),'WRITE':([6,],[25,]),'INT_LITERAL':([6,28,31,32,33,34,35,36,52,53,58,59,60,61,62,63,64,],[8,41,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'FLOAT_LITERAL':([6,31,32,33,34,35,36,52,53,58,59,60,61,62,63,64,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'RIGHT_CURLY_BRACKET':([7,8,9,10,11,12,13,14,15,18,19,24,25,26,27,41,42,43,48,49,50,51,56,69,70,71,72,75,86,90,91,92,],[27,-25,-4,-5,-6,-7,-8,-9,-10,-24,-29,-14,-15,-26,-2,56,-27,-28,-20,-21,-22,-23,-3,-16,-17,-18,-19,-11,-12,-30,-31,-13,]),'RETURN':([7,8,9,10,11,12,13,14,15,18,19,24,25,26,27,42,43,48,49,50,51,56,69,70,71,72,75,86,90,91,92,],[28,-25,-4,-5,-6,-7,-8,-9,-10,-24,-29,-14,-15,-26,-2,-27,-28,-20,-21,-22,-23,-3,-16,-17,-18,-19,-11,-12,-30,-31,-13,]),'ADD':([8,18,26,],[-25,33,-26,]),'MINUS':([8,18,26,],[-25,34,-26,]),'MULTIPLICATION':([8,18,26,],[-25,35,-26,]),'DIVISION':([8,18,26,],[-25,36,-26,]),'GT':([8,26,45,],[-25,-26,58,]),'LT':([8,26,45,],[-25,-26,59,]),'GET':([8,26,45,],[-25,-26,60,]),'LET':([8,26,45,],[-25,-26,61,]),'NOT':([8,26,45,46,],[-25,-26,62,65,]),'IS_EQUAL':([8,26,45,46,],[-25,-26,63,66,]),'IS_NOT_EQUAL':([8,26,45,46,],[-25,-26,64,67,]),'RIGHT_PARENTHESIS':([8,26,44,47,76,77,78,79,80,81,82,83,84,85,],[-25,-26,57,68,-32,-33,-34,-35,-36,-38,-39,-37,-40,-41,]),'AND':([12,19,42,43,71,],[29,-29,-27,-28,29,]),'OR':([12,19,42,43,71,],[30,-29,-27,-28,30,]),'LEFT_PARENTHESIS':([16,17,],[31,32,]),'ID':([20,21,22,23,],[37,38,39,40,]),'ELSE':([27,56,86,],[-2,-3,89,]),'EQUALS':([37,38,39,40,],[52,53,54,55,]),'QUOTE':([55,87,],[73,90,]),'DOUBLE_QUOTE':([55,88,],[74,91,]),'STRING_LITERAL':([73,74,],[87,88,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,57,68,89,],[5,75,86,92,]),'expression':([6,],[7,]),'while_expression':([6,],[9,]),'if_expression':([6,],[10,]),'arithmetic_expression':([6,33,34,35,36,52,53,],[11,48,49,50,51,69,70,]),'bool_expression':([6,54,],[12,71,]),'assign_expression':([6,],[13,]),'read_expression':([6,],[14,]),'write_expression':([6,],[15,]),'number':([6,31,32,33,34,35,36,52,53,58,59,60,61,62,63,64,],[18,45,45,18,18,18,18,18,18,76,77,78,79,80,81,82,]),'condition':([31,32,],[44,47,]),'string_expression':([55,],[72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> STATIC VOID MAIN block','program',4,'p_program','lexer.py',116),
  ('block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET','block',3,'p_block','lexer.py',120),
  ('block -> LEFT_CURLY_BRACKET expression RETURN INT_LITERAL RIGHT_CURLY_BRACKET','block',5,'p_block','lexer.py',121),
  ('expression -> while_expression','expression',1,'p_expression','lexer.py',125),
  ('expression -> if_expression','expression',1,'p_expression','lexer.py',126),
  ('expression -> arithmetic_expression','expression',1,'p_expression','lexer.py',127),
  ('expression -> bool_expression','expression',1,'p_expression','lexer.py',128),
  ('expression -> assign_expression','expression',1,'p_expression','lexer.py',129),
  ('expression -> read_expression','expression',1,'p_expression','lexer.py',130),
  ('expression -> write_expression','expression',1,'p_expression','lexer.py',131),
  ('while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block','while_expression',5,'p_while_expression','lexer.py',137),
  ('if_expression -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block','if_expression',5,'p_if_expression','lexer.py',141),
  ('if_expression -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block ELSE block','if_expression',7,'p_if_expression','lexer.py',142),
  ('read_expression -> READ','read_expression',1,'p_read_expression','lexer.py',146),
  ('write_expression -> WRITE','write_expression',1,'p_write_expression','lexer.py',150),
  ('assign_expression -> INT ID EQUALS arithmetic_expression','assign_expression',4,'p_assign_expression','lexer.py',154),
  ('assign_expression -> FLOAT ID EQUALS arithmetic_expression','assign_expression',4,'p_assign_expression','lexer.py',155),
  ('assign_expression -> BOOL ID EQUALS bool_expression','assign_expression',4,'p_assign_expression','lexer.py',156),
  ('assign_expression -> STRING ID EQUALS string_expression','assign_expression',4,'p_assign_expression','lexer.py',157),
  ('arithmetic_expression -> number ADD arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','lexer.py',168),
  ('arithmetic_expression -> number MINUS arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','lexer.py',169),
  ('arithmetic_expression -> number MULTIPLICATION arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','lexer.py',170),
  ('arithmetic_expression -> number DIVISION arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','lexer.py',171),
  ('arithmetic_expression -> number','arithmetic_expression',1,'p_arithmetic_expression','lexer.py',172),
  ('number -> INT_LITERAL','number',1,'p_number','lexer.py',178),
  ('number -> FLOAT_LITERAL','number',1,'p_number','lexer.py',179),
  ('bool_expression -> bool_expression AND BOOL_LITERAL','bool_expression',3,'p_bool_expression','lexer.py',187),
  ('bool_expression -> bool_expression OR BOOL_LITERAL','bool_expression',3,'p_bool_expression','lexer.py',188),
  ('bool_expression -> BOOL_LITERAL','bool_expression',1,'p_bool_expression','lexer.py',189),
  ('string_expression -> QUOTE STRING_LITERAL QUOTE','string_expression',3,'p_string_expression','lexer.py',193),
  ('string_expression -> DOUBLE_QUOTE STRING_LITERAL DOUBLE_QUOTE','string_expression',3,'p_string_expression','lexer.py',194),
  ('condition -> number GT number','condition',3,'p_condition','lexer.py',198),
  ('condition -> number LT number','condition',3,'p_condition','lexer.py',199),
  ('condition -> number GET number','condition',3,'p_condition','lexer.py',200),
  ('condition -> number LET number','condition',3,'p_condition','lexer.py',201),
  ('condition -> number NOT number','condition',3,'p_condition','lexer.py',202),
  ('condition -> BOOL_LITERAL NOT BOOL_LITERAL','condition',3,'p_condition','lexer.py',203),
  ('condition -> number IS_EQUAL number','condition',3,'p_condition','lexer.py',204),
  ('condition -> number IS_NOT_EQUAL number','condition',3,'p_condition','lexer.py',205),
  ('condition -> BOOL_LITERAL IS_EQUAL BOOL_LITERAL','condition',3,'p_condition','lexer.py',206),
  ('condition -> BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL','condition',3,'p_condition','lexer.py',207),
]
