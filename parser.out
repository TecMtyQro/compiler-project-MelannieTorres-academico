Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    CONST
    DOUBLE_QUOTE
    EQUALS
    FLOAT
    INT
    QUOTE
    STRING
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> STATIC VOID MAIN block
Rule 2     block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET
Rule 3     expressions -> expression
Rule 4     expressions -> expression expressions
Rule 5     expression -> read_expression SEMICOLON
Rule 6     expression -> write_expression SEMICOLON
Rule 7     expression -> RETURN INT_LITERAL SEMICOLON
Rule 8     expression -> RETURN BOOL_LITERAL SEMICOLON
Rule 9     expression -> if_expression
Rule 10    expression -> while_expression
Rule 11    while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block
Rule 12    if_expression -> start_if
Rule 13    if_expression -> start_if else_expression
Rule 14    start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block
Rule 15    else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression
Rule 16    else_expression -> ELSE block
Rule 17    read_expression -> READ
Rule 18    write_expression -> WRITE LEFT_PARENTHESIS string_literals RIGHT_PARENTHESIS
Rule 19    arithmetic_expression -> arithmetic_literals ADD arithmetic_expression
Rule 20    arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression
Rule 21    arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression
Rule 22    arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression
Rule 23    arithmetic_expression -> arithmetic_literals
Rule 24    arithmetic_literals -> INT_LITERAL
Rule 25    arithmetic_literals -> FLOAT_LITERAL
Rule 26    string_literals -> STRING_LITERAL
Rule 27    string_literals -> ID
Rule 28    bool_expression -> BOOL_LITERAL AND bool_expression
Rule 29    bool_expression -> BOOL_LITERAL OR bool_expression
Rule 30    bool_expression -> BOOL_LITERAL
Rule 31    condition -> arithmetic_expression GT arithmetic_expression
Rule 32    condition -> arithmetic_expression LT arithmetic_expression
Rule 33    condition -> arithmetic_expression GET arithmetic_expression
Rule 34    condition -> arithmetic_expression LET arithmetic_expression
Rule 35    condition -> arithmetic_expression IS_EQUAL arithmetic_expression
Rule 36    condition -> arithmetic_expression IS_NOT_EQUAL arithmetic_expression
Rule 37    condition -> BOOL_LITERAL IS_EQUAL BOOL_LITERAL
Rule 38    condition -> BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL

Terminals, with rules where they appear

ADD                  : 19
AND                  : 28
BOOL                 : 
BOOL_LITERAL         : 8 28 29 30 37 37 38 38
CONST                : 
DIVISION             : 22
DOUBLE_QUOTE         : 
ELSE                 : 15 16
EQUALS               : 
FLOAT                : 
FLOAT_LITERAL        : 25
GET                  : 33
GT                   : 31
ID                   : 27
IF                   : 14 15
INT                  : 
INT_LITERAL          : 7 24
IS_EQUAL             : 35 37
IS_NOT_EQUAL         : 36 38
LEFT_CURLY_BRACKET   : 2
LEFT_PARENTHESIS     : 11 14 15 18
LET                  : 34
LT                   : 32
MAIN                 : 1
MINUS                : 20
MULTIPLICATION       : 21
OR                   : 29
QUOTE                : 
READ                 : 17
RETURN               : 7 8
RIGHT_CURLY_BRACKET  : 2
RIGHT_PARENTHESIS    : 11 14 15 18
SEMICOLON            : 5 6 7 8
STATIC               : 1
STRING               : 
STRING_LITERAL       : 26
VAR                  : 
VOID                 : 1
WHILE                : 11
WRITE                : 18
error                : 

Nonterminals, with rules where they appear

arithmetic_expression : 19 20 21 22 31 31 32 32 33 33 34 34 35 35 36 36
arithmetic_literals  : 19 20 21 22 23
block                : 1 11 14 15 16
bool_expression      : 28 29
condition            : 11 14 15
else_expression      : 13 15
expression           : 2 3 4
expressions          : 4
if_expression        : 9
program              : 0
read_expression      : 5
start_if             : 12 13
string_literals      : 18
while_expression     : 10
write_expression     : 6

Parsing method: SLR

state 0

    (0) S' -> . program
    (1) program -> . STATIC VOID MAIN block

    STATIC          shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> STATIC . VOID MAIN block

    VOID            shift and go to state 3


state 3

    (1) program -> STATIC VOID . MAIN block

    MAIN            shift and go to state 4


state 4

    (1) program -> STATIC VOID MAIN . block
    (2) block -> . LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 6

    block                          shift and go to state 5

state 5

    (1) program -> STATIC VOID MAIN block .

    $end            reduce using rule 1 (program -> STATIC VOID MAIN block .)


state 6

    (2) block -> LEFT_CURLY_BRACKET . expression RIGHT_CURLY_BRACKET
    (5) expression -> . read_expression SEMICOLON
    (6) expression -> . write_expression SEMICOLON
    (7) expression -> . RETURN INT_LITERAL SEMICOLON
    (8) expression -> . RETURN BOOL_LITERAL SEMICOLON
    (9) expression -> . if_expression
    (10) expression -> . while_expression
    (17) read_expression -> . READ
    (18) write_expression -> . WRITE LEFT_PARENTHESIS string_literals RIGHT_PARENTHESIS
    (12) if_expression -> . start_if
    (13) if_expression -> . start_if else_expression
    (11) while_expression -> . WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block
    (14) start_if -> . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block

    RETURN          shift and go to state 10
    READ            shift and go to state 13
    WRITE           shift and go to state 14
    WHILE           shift and go to state 16
    IF              shift and go to state 17

    expression                     shift and go to state 7
    read_expression                shift and go to state 8
    write_expression               shift and go to state 9
    if_expression                  shift and go to state 11
    while_expression               shift and go to state 12
    start_if                       shift and go to state 15

state 7

    (2) block -> LEFT_CURLY_BRACKET expression . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET shift and go to state 18


state 8

    (5) expression -> read_expression . SEMICOLON

    SEMICOLON       shift and go to state 19


state 9

    (6) expression -> write_expression . SEMICOLON

    SEMICOLON       shift and go to state 20


state 10

    (7) expression -> RETURN . INT_LITERAL SEMICOLON
    (8) expression -> RETURN . BOOL_LITERAL SEMICOLON

    INT_LITERAL     shift and go to state 21
    BOOL_LITERAL    shift and go to state 22


state 11

    (9) expression -> if_expression .

    RIGHT_CURLY_BRACKET reduce using rule 9 (expression -> if_expression .)
    RETURN          reduce using rule 9 (expression -> if_expression .)
    READ            reduce using rule 9 (expression -> if_expression .)
    WRITE           reduce using rule 9 (expression -> if_expression .)
    WHILE           reduce using rule 9 (expression -> if_expression .)
    IF              reduce using rule 9 (expression -> if_expression .)


state 12

    (10) expression -> while_expression .

    RIGHT_CURLY_BRACKET reduce using rule 10 (expression -> while_expression .)
    RETURN          reduce using rule 10 (expression -> while_expression .)
    READ            reduce using rule 10 (expression -> while_expression .)
    WRITE           reduce using rule 10 (expression -> while_expression .)
    WHILE           reduce using rule 10 (expression -> while_expression .)
    IF              reduce using rule 10 (expression -> while_expression .)


state 13

    (17) read_expression -> READ .

    SEMICOLON       reduce using rule 17 (read_expression -> READ .)


state 14

    (18) write_expression -> WRITE . LEFT_PARENTHESIS string_literals RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 23


state 15

    (12) if_expression -> start_if .
    (13) if_expression -> start_if . else_expression
    (15) else_expression -> . ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression
    (16) else_expression -> . ELSE block

    RIGHT_CURLY_BRACKET reduce using rule 12 (if_expression -> start_if .)
    RETURN          reduce using rule 12 (if_expression -> start_if .)
    READ            reduce using rule 12 (if_expression -> start_if .)
    WRITE           reduce using rule 12 (if_expression -> start_if .)
    WHILE           reduce using rule 12 (if_expression -> start_if .)
    IF              reduce using rule 12 (if_expression -> start_if .)
    ELSE            shift and go to state 25

    else_expression                shift and go to state 24

state 16

    (11) while_expression -> WHILE . LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block

    LEFT_PARENTHESIS shift and go to state 26


state 17

    (14) start_if -> IF . LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block

    LEFT_PARENTHESIS shift and go to state 27


state 18

    (2) block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET .

    $end            reduce using rule 2 (block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 2 (block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 2 (block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 2 (block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 2 (block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 2 (block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 2 (block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 2 (block -> LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET .)


state 19

    (5) expression -> read_expression SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 5 (expression -> read_expression SEMICOLON .)
    RETURN          reduce using rule 5 (expression -> read_expression SEMICOLON .)
    READ            reduce using rule 5 (expression -> read_expression SEMICOLON .)
    WRITE           reduce using rule 5 (expression -> read_expression SEMICOLON .)
    WHILE           reduce using rule 5 (expression -> read_expression SEMICOLON .)
    IF              reduce using rule 5 (expression -> read_expression SEMICOLON .)


state 20

    (6) expression -> write_expression SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 6 (expression -> write_expression SEMICOLON .)
    RETURN          reduce using rule 6 (expression -> write_expression SEMICOLON .)
    READ            reduce using rule 6 (expression -> write_expression SEMICOLON .)
    WRITE           reduce using rule 6 (expression -> write_expression SEMICOLON .)
    WHILE           reduce using rule 6 (expression -> write_expression SEMICOLON .)
    IF              reduce using rule 6 (expression -> write_expression SEMICOLON .)


state 21

    (7) expression -> RETURN INT_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 28


state 22

    (8) expression -> RETURN BOOL_LITERAL . SEMICOLON

    SEMICOLON       shift and go to state 29


state 23

    (18) write_expression -> WRITE LEFT_PARENTHESIS . string_literals RIGHT_PARENTHESIS
    (26) string_literals -> . STRING_LITERAL
    (27) string_literals -> . ID

    STRING_LITERAL  shift and go to state 31
    ID              shift and go to state 32

    string_literals                shift and go to state 30

state 24

    (13) if_expression -> start_if else_expression .

    RIGHT_CURLY_BRACKET reduce using rule 13 (if_expression -> start_if else_expression .)
    RETURN          reduce using rule 13 (if_expression -> start_if else_expression .)
    READ            reduce using rule 13 (if_expression -> start_if else_expression .)
    WRITE           reduce using rule 13 (if_expression -> start_if else_expression .)
    WHILE           reduce using rule 13 (if_expression -> start_if else_expression .)
    IF              reduce using rule 13 (if_expression -> start_if else_expression .)


state 25

    (15) else_expression -> ELSE . IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression
    (16) else_expression -> ELSE . block
    (2) block -> . LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET

    IF              shift and go to state 33
    LEFT_CURLY_BRACKET shift and go to state 6

    block                          shift and go to state 34

state 26

    (11) while_expression -> WHILE LEFT_PARENTHESIS . condition RIGHT_PARENTHESIS block
    (31) condition -> . arithmetic_expression GT arithmetic_expression
    (32) condition -> . arithmetic_expression LT arithmetic_expression
    (33) condition -> . arithmetic_expression GET arithmetic_expression
    (34) condition -> . arithmetic_expression LET arithmetic_expression
    (35) condition -> . arithmetic_expression IS_EQUAL arithmetic_expression
    (36) condition -> . arithmetic_expression IS_NOT_EQUAL arithmetic_expression
    (37) condition -> . BOOL_LITERAL IS_EQUAL BOOL_LITERAL
    (38) condition -> . BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    BOOL_LITERAL    shift and go to state 37
    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    condition                      shift and go to state 35
    arithmetic_expression          shift and go to state 36
    arithmetic_literals            shift and go to state 38

state 27

    (14) start_if -> IF LEFT_PARENTHESIS . condition RIGHT_PARENTHESIS block
    (31) condition -> . arithmetic_expression GT arithmetic_expression
    (32) condition -> . arithmetic_expression LT arithmetic_expression
    (33) condition -> . arithmetic_expression GET arithmetic_expression
    (34) condition -> . arithmetic_expression LET arithmetic_expression
    (35) condition -> . arithmetic_expression IS_EQUAL arithmetic_expression
    (36) condition -> . arithmetic_expression IS_NOT_EQUAL arithmetic_expression
    (37) condition -> . BOOL_LITERAL IS_EQUAL BOOL_LITERAL
    (38) condition -> . BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    BOOL_LITERAL    shift and go to state 37
    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    condition                      shift and go to state 41
    arithmetic_expression          shift and go to state 36
    arithmetic_literals            shift and go to state 38

state 28

    (7) expression -> RETURN INT_LITERAL SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 7 (expression -> RETURN INT_LITERAL SEMICOLON .)
    RETURN          reduce using rule 7 (expression -> RETURN INT_LITERAL SEMICOLON .)
    READ            reduce using rule 7 (expression -> RETURN INT_LITERAL SEMICOLON .)
    WRITE           reduce using rule 7 (expression -> RETURN INT_LITERAL SEMICOLON .)
    WHILE           reduce using rule 7 (expression -> RETURN INT_LITERAL SEMICOLON .)
    IF              reduce using rule 7 (expression -> RETURN INT_LITERAL SEMICOLON .)


state 29

    (8) expression -> RETURN BOOL_LITERAL SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 8 (expression -> RETURN BOOL_LITERAL SEMICOLON .)
    RETURN          reduce using rule 8 (expression -> RETURN BOOL_LITERAL SEMICOLON .)
    READ            reduce using rule 8 (expression -> RETURN BOOL_LITERAL SEMICOLON .)
    WRITE           reduce using rule 8 (expression -> RETURN BOOL_LITERAL SEMICOLON .)
    WHILE           reduce using rule 8 (expression -> RETURN BOOL_LITERAL SEMICOLON .)
    IF              reduce using rule 8 (expression -> RETURN BOOL_LITERAL SEMICOLON .)


state 30

    (18) write_expression -> WRITE LEFT_PARENTHESIS string_literals . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 42


state 31

    (26) string_literals -> STRING_LITERAL .

    RIGHT_PARENTHESIS reduce using rule 26 (string_literals -> STRING_LITERAL .)


state 32

    (27) string_literals -> ID .

    RIGHT_PARENTHESIS reduce using rule 27 (string_literals -> ID .)


state 33

    (15) else_expression -> ELSE IF . LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression

    LEFT_PARENTHESIS shift and go to state 43


state 34

    (16) else_expression -> ELSE block .

    RIGHT_CURLY_BRACKET reduce using rule 16 (else_expression -> ELSE block .)
    RETURN          reduce using rule 16 (else_expression -> ELSE block .)
    READ            reduce using rule 16 (else_expression -> ELSE block .)
    WRITE           reduce using rule 16 (else_expression -> ELSE block .)
    WHILE           reduce using rule 16 (else_expression -> ELSE block .)
    IF              reduce using rule 16 (else_expression -> ELSE block .)


state 35

    (11) while_expression -> WHILE LEFT_PARENTHESIS condition . RIGHT_PARENTHESIS block

    RIGHT_PARENTHESIS shift and go to state 44


state 36

    (31) condition -> arithmetic_expression . GT arithmetic_expression
    (32) condition -> arithmetic_expression . LT arithmetic_expression
    (33) condition -> arithmetic_expression . GET arithmetic_expression
    (34) condition -> arithmetic_expression . LET arithmetic_expression
    (35) condition -> arithmetic_expression . IS_EQUAL arithmetic_expression
    (36) condition -> arithmetic_expression . IS_NOT_EQUAL arithmetic_expression

    GT              shift and go to state 45
    LT              shift and go to state 46
    GET             shift and go to state 47
    LET             shift and go to state 48
    IS_EQUAL        shift and go to state 49
    IS_NOT_EQUAL    shift and go to state 50


state 37

    (37) condition -> BOOL_LITERAL . IS_EQUAL BOOL_LITERAL
    (38) condition -> BOOL_LITERAL . IS_NOT_EQUAL BOOL_LITERAL

    IS_EQUAL        shift and go to state 51
    IS_NOT_EQUAL    shift and go to state 52


state 38

    (19) arithmetic_expression -> arithmetic_literals . ADD arithmetic_expression
    (20) arithmetic_expression -> arithmetic_literals . MINUS arithmetic_expression
    (21) arithmetic_expression -> arithmetic_literals . MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> arithmetic_literals . DIVISION arithmetic_expression
    (23) arithmetic_expression -> arithmetic_literals .

    ADD             shift and go to state 53
    MINUS           shift and go to state 54
    MULTIPLICATION  shift and go to state 55
    DIVISION        shift and go to state 56
    GT              reduce using rule 23 (arithmetic_expression -> arithmetic_literals .)
    RIGHT_PARENTHESIS reduce using rule 23 (arithmetic_expression -> arithmetic_literals .)
    LT              reduce using rule 23 (arithmetic_expression -> arithmetic_literals .)
    GET             reduce using rule 23 (arithmetic_expression -> arithmetic_literals .)
    LET             reduce using rule 23 (arithmetic_expression -> arithmetic_literals .)
    IS_EQUAL        reduce using rule 23 (arithmetic_expression -> arithmetic_literals .)
    IS_NOT_EQUAL    reduce using rule 23 (arithmetic_expression -> arithmetic_literals .)


state 39

    (24) arithmetic_literals -> INT_LITERAL .

    ADD             reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)
    MINUS           reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)
    MULTIPLICATION  reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)
    DIVISION        reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)
    GT              reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)
    RIGHT_PARENTHESIS reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)
    LT              reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)
    GET             reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)
    LET             reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)
    IS_EQUAL        reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)
    IS_NOT_EQUAL    reduce using rule 24 (arithmetic_literals -> INT_LITERAL .)


state 40

    (25) arithmetic_literals -> FLOAT_LITERAL .

    ADD             reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)
    MINUS           reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)
    MULTIPLICATION  reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)
    DIVISION        reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)
    GT              reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)
    RIGHT_PARENTHESIS reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)
    LT              reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)
    GET             reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)
    LET             reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)
    IS_EQUAL        reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)
    IS_NOT_EQUAL    reduce using rule 25 (arithmetic_literals -> FLOAT_LITERAL .)


state 41

    (14) start_if -> IF LEFT_PARENTHESIS condition . RIGHT_PARENTHESIS block

    RIGHT_PARENTHESIS shift and go to state 57


state 42

    (18) write_expression -> WRITE LEFT_PARENTHESIS string_literals RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 18 (write_expression -> WRITE LEFT_PARENTHESIS string_literals RIGHT_PARENTHESIS .)


state 43

    (15) else_expression -> ELSE IF LEFT_PARENTHESIS . condition RIGHT_PARENTHESIS block else_expression
    (31) condition -> . arithmetic_expression GT arithmetic_expression
    (32) condition -> . arithmetic_expression LT arithmetic_expression
    (33) condition -> . arithmetic_expression GET arithmetic_expression
    (34) condition -> . arithmetic_expression LET arithmetic_expression
    (35) condition -> . arithmetic_expression IS_EQUAL arithmetic_expression
    (36) condition -> . arithmetic_expression IS_NOT_EQUAL arithmetic_expression
    (37) condition -> . BOOL_LITERAL IS_EQUAL BOOL_LITERAL
    (38) condition -> . BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    BOOL_LITERAL    shift and go to state 37
    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    condition                      shift and go to state 58
    arithmetic_expression          shift and go to state 36
    arithmetic_literals            shift and go to state 38

state 44

    (11) while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS . block
    (2) block -> . LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 6

    block                          shift and go to state 59

state 45

    (31) condition -> arithmetic_expression GT . arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    arithmetic_expression          shift and go to state 60
    arithmetic_literals            shift and go to state 38

state 46

    (32) condition -> arithmetic_expression LT . arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    arithmetic_expression          shift and go to state 61
    arithmetic_literals            shift and go to state 38

state 47

    (33) condition -> arithmetic_expression GET . arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    arithmetic_expression          shift and go to state 62
    arithmetic_literals            shift and go to state 38

state 48

    (34) condition -> arithmetic_expression LET . arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    arithmetic_expression          shift and go to state 63
    arithmetic_literals            shift and go to state 38

state 49

    (35) condition -> arithmetic_expression IS_EQUAL . arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    arithmetic_expression          shift and go to state 64
    arithmetic_literals            shift and go to state 38

state 50

    (36) condition -> arithmetic_expression IS_NOT_EQUAL . arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    arithmetic_expression          shift and go to state 65
    arithmetic_literals            shift and go to state 38

state 51

    (37) condition -> BOOL_LITERAL IS_EQUAL . BOOL_LITERAL

    BOOL_LITERAL    shift and go to state 66


state 52

    (38) condition -> BOOL_LITERAL IS_NOT_EQUAL . BOOL_LITERAL

    BOOL_LITERAL    shift and go to state 67


state 53

    (19) arithmetic_expression -> arithmetic_literals ADD . arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    arithmetic_literals            shift and go to state 38
    arithmetic_expression          shift and go to state 68

state 54

    (20) arithmetic_expression -> arithmetic_literals MINUS . arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    arithmetic_literals            shift and go to state 38
    arithmetic_expression          shift and go to state 69

state 55

    (21) arithmetic_expression -> arithmetic_literals MULTIPLICATION . arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    arithmetic_literals            shift and go to state 38
    arithmetic_expression          shift and go to state 70

state 56

    (22) arithmetic_expression -> arithmetic_literals DIVISION . arithmetic_expression
    (19) arithmetic_expression -> . arithmetic_literals ADD arithmetic_expression
    (20) arithmetic_expression -> . arithmetic_literals MINUS arithmetic_expression
    (21) arithmetic_expression -> . arithmetic_literals MULTIPLICATION arithmetic_expression
    (22) arithmetic_expression -> . arithmetic_literals DIVISION arithmetic_expression
    (23) arithmetic_expression -> . arithmetic_literals
    (24) arithmetic_literals -> . INT_LITERAL
    (25) arithmetic_literals -> . FLOAT_LITERAL

    INT_LITERAL     shift and go to state 39
    FLOAT_LITERAL   shift and go to state 40

    arithmetic_literals            shift and go to state 38
    arithmetic_expression          shift and go to state 71

state 57

    (14) start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS . block
    (2) block -> . LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 6

    block                          shift and go to state 72

state 58

    (15) else_expression -> ELSE IF LEFT_PARENTHESIS condition . RIGHT_PARENTHESIS block else_expression

    RIGHT_PARENTHESIS shift and go to state 73


state 59

    (11) while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .

    RIGHT_CURLY_BRACKET reduce using rule 11 (while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    RETURN          reduce using rule 11 (while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    READ            reduce using rule 11 (while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    WRITE           reduce using rule 11 (while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    WHILE           reduce using rule 11 (while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    IF              reduce using rule 11 (while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)


state 60

    (31) condition -> arithmetic_expression GT arithmetic_expression .

    RIGHT_PARENTHESIS reduce using rule 31 (condition -> arithmetic_expression GT arithmetic_expression .)


state 61

    (32) condition -> arithmetic_expression LT arithmetic_expression .

    RIGHT_PARENTHESIS reduce using rule 32 (condition -> arithmetic_expression LT arithmetic_expression .)


state 62

    (33) condition -> arithmetic_expression GET arithmetic_expression .

    RIGHT_PARENTHESIS reduce using rule 33 (condition -> arithmetic_expression GET arithmetic_expression .)


state 63

    (34) condition -> arithmetic_expression LET arithmetic_expression .

    RIGHT_PARENTHESIS reduce using rule 34 (condition -> arithmetic_expression LET arithmetic_expression .)


state 64

    (35) condition -> arithmetic_expression IS_EQUAL arithmetic_expression .

    RIGHT_PARENTHESIS reduce using rule 35 (condition -> arithmetic_expression IS_EQUAL arithmetic_expression .)


state 65

    (36) condition -> arithmetic_expression IS_NOT_EQUAL arithmetic_expression .

    RIGHT_PARENTHESIS reduce using rule 36 (condition -> arithmetic_expression IS_NOT_EQUAL arithmetic_expression .)


state 66

    (37) condition -> BOOL_LITERAL IS_EQUAL BOOL_LITERAL .

    RIGHT_PARENTHESIS reduce using rule 37 (condition -> BOOL_LITERAL IS_EQUAL BOOL_LITERAL .)


state 67

    (38) condition -> BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL .

    RIGHT_PARENTHESIS reduce using rule 38 (condition -> BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL .)


state 68

    (19) arithmetic_expression -> arithmetic_literals ADD arithmetic_expression .

    GT              reduce using rule 19 (arithmetic_expression -> arithmetic_literals ADD arithmetic_expression .)
    RIGHT_PARENTHESIS reduce using rule 19 (arithmetic_expression -> arithmetic_literals ADD arithmetic_expression .)
    LT              reduce using rule 19 (arithmetic_expression -> arithmetic_literals ADD arithmetic_expression .)
    GET             reduce using rule 19 (arithmetic_expression -> arithmetic_literals ADD arithmetic_expression .)
    LET             reduce using rule 19 (arithmetic_expression -> arithmetic_literals ADD arithmetic_expression .)
    IS_EQUAL        reduce using rule 19 (arithmetic_expression -> arithmetic_literals ADD arithmetic_expression .)
    IS_NOT_EQUAL    reduce using rule 19 (arithmetic_expression -> arithmetic_literals ADD arithmetic_expression .)


state 69

    (20) arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression .

    GT              reduce using rule 20 (arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression .)
    RIGHT_PARENTHESIS reduce using rule 20 (arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression .)
    LT              reduce using rule 20 (arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression .)
    GET             reduce using rule 20 (arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression .)
    LET             reduce using rule 20 (arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression .)
    IS_EQUAL        reduce using rule 20 (arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression .)
    IS_NOT_EQUAL    reduce using rule 20 (arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression .)


state 70

    (21) arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression .

    GT              reduce using rule 21 (arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression .)
    RIGHT_PARENTHESIS reduce using rule 21 (arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression .)
    LT              reduce using rule 21 (arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression .)
    GET             reduce using rule 21 (arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression .)
    LET             reduce using rule 21 (arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression .)
    IS_EQUAL        reduce using rule 21 (arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression .)
    IS_NOT_EQUAL    reduce using rule 21 (arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression .)


state 71

    (22) arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression .

    GT              reduce using rule 22 (arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression .)
    RIGHT_PARENTHESIS reduce using rule 22 (arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression .)
    LT              reduce using rule 22 (arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression .)
    GET             reduce using rule 22 (arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression .)
    LET             reduce using rule 22 (arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression .)
    IS_EQUAL        reduce using rule 22 (arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression .)
    IS_NOT_EQUAL    reduce using rule 22 (arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression .)


state 72

    (14) start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .

    RIGHT_CURLY_BRACKET reduce using rule 14 (start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    RETURN          reduce using rule 14 (start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    READ            reduce using rule 14 (start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    WRITE           reduce using rule 14 (start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    WHILE           reduce using rule 14 (start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    IF              reduce using rule 14 (start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)
    ELSE            reduce using rule 14 (start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block .)


state 73

    (15) else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS . block else_expression
    (2) block -> . LEFT_CURLY_BRACKET expression RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 6

    block                          shift and go to state 74

state 74

    (15) else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block . else_expression
    (15) else_expression -> . ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression
    (16) else_expression -> . ELSE block

    ELSE            shift and go to state 25

    else_expression                shift and go to state 75

state 75

    (15) else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression .

    RIGHT_CURLY_BRACKET reduce using rule 15 (else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression .)
    RETURN          reduce using rule 15 (else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression .)
    READ            reduce using rule 15 (else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression .)
    WRITE           reduce using rule 15 (else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression .)
    WHILE           reduce using rule 15 (else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression .)
    IF              reduce using rule 15 (else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression .)

