Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LEFT_CURLY_BRACKET
    RIGHT_CURLY_BRACKET

Grammar

Rule 0     S' -> program
Rule 1     program -> STATIC VOID MAIN block
Rule 2     expressions -> expression
Rule 3     expressions -> expression expressions
Rule 4     expression -> read_expression SEMICOLON
Rule 5     expression -> write_expression SEMICOLON
Rule 6     expression -> RETURN arithmetic_expression SEMICOLON
Rule 7     expression -> RETURN bool_expression SEMICOLON
Rule 8     expression -> assign_expression SEMICOLON
Rule 9     expression -> if_expression
Rule 10    expression -> while_expression
Rule 11    while_expression -> WHILE LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block
Rule 12    if_expression -> start_if
Rule 13    if_expression -> start_if else_expression
Rule 14    start_if -> IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block
Rule 15    else_expression -> ELSE IF LEFT_PARENTHESIS condition RIGHT_PARENTHESIS block else_expression
Rule 16    else_expression -> ELSE block
Rule 17    read_expression -> READ
Rule 18    write_expression -> WRITE LEFT_PARENTHESIS string_literals RIGHT_PARENTHESIS
Rule 19    arithmetic_datatypes -> INT
Rule 20    arithmetic_datatypes -> FLOAT
Rule 21    bool_datatypes -> BOOL
Rule 22    string_datatypes -> STRING
Rule 23    assign_expression -> CONST aux_assign_expression
Rule 24    assign_expression -> aux_assign_expression
Rule 25    assign_expression -> declaration_expression
Rule 26    assign_expression -> aux2_assign_expression
Rule 27    aux_assign_expression -> arithmetic_datatypes ID EQUALS arithmetic_expression
Rule 28    aux_assign_expression -> bool_datatypes ID EQUALS bool_expression
Rule 29    aux_assign_expression -> string_datatypes ID EQUALS string_expression
Rule 30    aux2_assign_expression -> ID EQUALS arithmetic_expression
Rule 31    aux2_assign_expression -> ID EQUALS bool_expression
Rule 32    aux2_assign_expression -> ID EQUALS string_expression
Rule 33    declaration_expression -> arithmetic_datatypes ID
Rule 34    declaration_expression -> bool_datatypes ID
Rule 35    declaration_expression -> string_datatypes ID
Rule 36    arithmetic_expression -> arithmetic_literals ADD arithmetic_expression
Rule 37    arithmetic_expression -> arithmetic_literals MINUS arithmetic_expression
Rule 38    arithmetic_expression -> arithmetic_literals MULTIPLICATION arithmetic_expression
Rule 39    arithmetic_expression -> arithmetic_literals DIVISION arithmetic_expression
Rule 40    arithmetic_expression -> arithmetic_literals
Rule 41    arithmetic_literals -> INT_LITERAL
Rule 42    arithmetic_literals -> FLOAT_LITERAL
Rule 43    arithmetic_literals -> ID
Rule 44    string_literals -> STRING_LITERAL
Rule 45    string_literals -> ID
Rule 46    bool_expression -> BOOL_LITERAL AND bool_expression
Rule 47    bool_expression -> BOOL_LITERAL OR bool_expression
Rule 48    bool_expression -> BOOL_LITERAL
Rule 49    string_expression -> STRING_LITERAL
Rule 50    condition -> arithmetic_expression GT arithmetic_expression
Rule 51    condition -> arithmetic_expression LT arithmetic_expression
Rule 52    condition -> arithmetic_expression GET arithmetic_expression
Rule 53    condition -> arithmetic_expression LET arithmetic_expression
Rule 54    condition -> arithmetic_expression IS_EQUAL arithmetic_expression
Rule 55    condition -> arithmetic_expression IS_NOT_EQUAL arithmetic_expression
Rule 56    condition -> BOOL_LITERAL IS_EQUAL BOOL_LITERAL
Rule 57    condition -> BOOL_LITERAL IS_NOT_EQUAL BOOL_LITERAL

Terminals, with rules where they appear

ADD                  : 36
AND                  : 46
BOOL                 : 21
BOOL_LITERAL         : 46 47 48 56 56 57 57
CONST                : 23
DIVISION             : 39
ELSE                 : 15 16
EQUALS               : 27 28 29 30 31 32
FLOAT                : 20
FLOAT_LITERAL        : 42
GET                  : 52
GT                   : 50
ID                   : 27 28 29 30 31 32 33 34 35 43 45
IF                   : 14 15
INT                  : 19
INT_LITERAL          : 41
IS_EQUAL             : 54 56
IS_NOT_EQUAL         : 55 57
LEFT_CURLY_BRACKET   : 
LEFT_PARENTHESIS     : 11 14 15 18
LET                  : 53
LT                   : 51
MAIN                 : 1
MINUS                : 37
MULTIPLICATION       : 38
OR                   : 47
READ                 : 17
RETURN               : 6 7
RIGHT_CURLY_BRACKET  : 
RIGHT_PARENTHESIS    : 11 14 15 18
SEMICOLON            : 4 5 6 7 8
STATIC               : 1
STRING               : 22
STRING_LITERAL       : 44 49
VOID                 : 1
WHILE                : 11
WRITE                : 18
error                : 

Nonterminals, with rules where they appear

arithmetic_datatypes : 27 33
arithmetic_expression : 6 27 30 36 37 38 39 50 50 51 51 52 52 53 53 54 54 55 55
arithmetic_literals  : 36 37 38 39 40
assign_expression    : 8
aux2_assign_expression : 26
aux_assign_expression : 23 24
block                : 1 11 14 15 16
bool_datatypes       : 28 34
bool_expression      : 7 28 31 46 47
condition            : 11 14 15
declaration_expression : 25
else_expression      : 13 15
expression           : 2 3
expressions          : 3
if_expression        : 9
program              : 0
read_expression      : 4
start_if             : 12 13
string_datatypes     : 29 35
string_expression    : 29 32
string_literals      : 18
while_expression     : 10
write_expression     : 5

